# Sekai_Yoneya

from .. import loader, utils


@loader.tds
class WelcomeLeftMod(loader.Module):
    """–í—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ."""
    strings = {'name': 'Welcome & Left'}

    async def client_ready(self, client, db):
        self.db = db
        self.client = client

    async def welcomecmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π: .welcome <clearall (–ø–æ –∂–µ–ª–∞–Ω–∏—é)>."""
        welcome = self.db.get("Welcome", "welcome", {})
        chatid = str(message.chat_id)
        args = utils.get_args_raw(message)
        if args == "clearall":
            self.db.set("Welcome", "welcome", {})
            return await message.edit("<b>[Welcome]</b> –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è —Å–±—Ä–æ—à–µ–Ω—ã.")

        if chatid in welcome:
            welcome.pop(chatid)
            self.db.set("Welcome", "welcome", welcome)
            return await message.edit("<b>[Welcome]</b> –û—Ç–∫–ª—é—á–µ–Ω–æ!")

        welcome.setdefault(chatid, {})
        welcome[chatid].setdefault("message", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç!")
        welcome[chatid].setdefault("is_reply", False)
        self.db.set("Welcome", "welcome", welcome)
        await message.edit("<b>[Welcome]</b> –í–∫–ª—é—á–µ–Ω–æ!")


    async def setwelcomecmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ.\n–ò—Å–ø–æ–ª—å–∑—É–π: .setwelcome <—Ç–µ–∫—Å—Ç (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {name}; {chat})>; –Ω–∏—á–µ–≥–æ."""
        welcome = self.db.get("Welcome", "welcome", {})
        args = utils.get_args_raw(message)
        reply = await message.get_reply_message()
        chatid = str(message.chat_id)
        chat = await message.client.get_entity(int(chatid)) 
        try:
            if not args and not reply:
                return await message.edit(f'<b>[Welcome] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ "{chat.title}":</b>\n\n'
                                          f'<b>–°—Ç–∞—Ç—É—Å:</b> –í–∫–ª—é—á–µ–Ω–æ.\n'
                                          f'<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</b> {welcome[chatid]["message"]}\n\n'
                                          f'<b>~ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:</b> .setwelcome <—Ç–µ–∫—Å—Ç>.')
            else:
                if reply:
                    welcome[chatid]["message"] = reply.id
                    welcome[chatid]["is_reply"] = True
                else:
                    welcome[chatid]["message"] = args
                    welcome[chatid]["is_reply"] = False
                self.db.set("Welcome", "welcome", welcome)
                return await message.edit("<b>[Welcome] –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b>")
        except KeyError: return await message.edit(f'<b>[Welcome] –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ "{chat.title}":</b>\n\n'
                                                   f'<b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫–ª—é—á–µ–Ω–æ')


    async def watcher(self, message):
        """–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø–æ—á–µ–º—É –æ–Ω –∏–º–µ–Ω–Ω–æ watcher –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è... ü§î"""
        try:
            welcome = self.db.get("Welcome", "welcome", {})
            chatid = str(message.chat_id)
            if chatid not in welcome: return
            if message.user_joined or message.user_added:
                user = await message.get_user()
                chat = await message.get_chat()
                if welcome[chatid]["is_reply"] == False:
                    return await message.reply((welcome[chatid]["message"]).format(name=user.first_name, chat=chat.title))
                msg = await self.client.get_messages(int(chatid), ids=welcome[chatid]["message"])
                await message.reply(msg)
        except: pass
        
    async def leftcmd(self, message): 
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π: .left <clearall (–ø–æ –∂–µ–ª–∞–Ω–∏—é)>.""" 
        left = self.db.get("Left", "left", {}) 
        chatid = str(message.chat_id) 
        args = utils.get_args_raw(message) 
        if args == "clearall": 
            self.db.set("Left", "left", {}) 
            return await message.edit("<b>[Left]</b> –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è —Å–±—Ä–æ—à–µ–Ω—ã.") 
 
        if chatid in left: 
            left.pop(chatid) 
            self.db.set("Left", "left", left) 
            return await message.edit("<b>[Left]</b> –û—Ç–∫–ª—é—á–µ–Ω–æ!") 
 
        left.setdefault(chatid, {}) 
        left[chatid].setdefault("message", "–ü–æ–∫–∞üëã") 
        left[chatid].setdefault("is_reply", False) 
        self.db.set("Left", "left", left) 
        await message.edit("<b>[Left]</b> –í–∫–ª—é—á–µ–Ω!") 
 
 
    async def setleftcmd(self, message): 
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n–ò—Å–ø–æ–ª—å–∑—É–π: .setleft <—Ç–µ–∫—Å—Ç (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {name}; {chat})>; –Ω–∏—á–µ–≥–æ.""" 
        left = self.db.get("Left", "left", {}) 
        args = utils.get_args_raw(message) 
        reply = await message.get_reply_message() 
        chatid = str(message.chat_id) 
        chat = await message.client.get_entity(int(chatid))  
        try: 
            if not args and not reply: 
                return await message.edit(f'<b>[Left] –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ "{chat.title}":</b>\n\n' 
                                          f'<b>–°—Ç–∞—Ç—É—Å:</b> –í–∫–ª—é—á–µ–Ω–æ.\n' 
                                          f'<b>–¢–µ–∫—Å—Ç:</b> {left[chatid]["message"]}\n\n' 
                                          f'<b>~ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã:</b> .setleft <—Ç–µ–∫—Å—Ç>.') 
            else: 
                if reply: 
                    left[chatid]["message"] = reply.id 
                    left[chatid]["is_reply"] = True 
                else: 
                    left[chatid]["message"] = args 
                    left[chatid]["is_reply"] = False 
                self.db.set("Left", "left", left) 
                return await message.edit("<b>[Left] –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>") 
        except KeyError: return await message.edit(f'<b>[Left] –≤ "{chat.title}":</b>\n\n' 
                                                   f'<b>–°—Ç–∞—Ç—É—Å:</b> –û—Ç–∫–ª—é—á–µ–Ω–æ') 
 
 
    async def watcher(self, message): 
        try: 
            left = self.db.get("Left", "left", {}) 
            chatid = str(message.chat_id) 
            if chatid not in left: return 
            if message.user_left or message.user_kicked: 
                user = await message.get_user() 
                chat = await message.get_chat() 
                if left[chatid]["is_reply"] == False: 
                    return await message.reply((left[chatid]["message"]).format(name=user.first_name, chat=chat.title)) 
                msg = await self.client.get_messages(int(chatid), ids=left[chatid]["message"]) 
                await message.reply(msg) 
        except: pass
